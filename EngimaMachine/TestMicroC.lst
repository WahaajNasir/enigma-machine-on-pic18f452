;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 12/22/2024 6:41:48 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF003EF69  	GOTO        1746
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_Div_16x16_S_L:
;__Lib_Math.c,139 :: 		
;__Lib_Math.c,146 :: 		
0x001C	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,147 :: 		
0x001E	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,148 :: 		
0x0020	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,149 :: 		
0x0022	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,150 :: 		
0x0024	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,151 :: 		
0x0026	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,152 :: 		
0x0028	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,153 :: 		
0x002A	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,154 :: 		
0x002C	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,155 :: 		
0x002E	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,156 :: 		
0x0030	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,158 :: 		
0x0032	0x0E0F      	MOVLW       15
;__Lib_Math.c,159 :: 		
0x0034	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,161 :: 		
0x0036	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,162 :: 		
0x0038	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,163 :: 		
0x003A	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,164 :: 		
0x003C	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,166 :: 		
0x003E	0xA000      	BTFSS       R0, 0, 0
;__Lib_Math.c,167 :: 		
0x0040	0xD006      	BRA         $+14
;__Lib_Math.c,168 :: 		
0x0042	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,169 :: 		
0x0044	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,170 :: 		
0x0046	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,171 :: 		
0x0048	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,172 :: 		
0x004A	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,173 :: 		
0x004C	0xD005      	BRA         $+12
;__Lib_Math.c,175 :: 		
0x004E	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,176 :: 		
0x0050	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,177 :: 		
0x0052	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,178 :: 		
0x0054	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,179 :: 		
0x0056	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,181 :: 		
0x0058	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,182 :: 		
0x005A	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,184 :: 		
0x005C	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,185 :: 		
0x005E	0xD7EB      	BRA         $-40
;__Lib_Math.c,187 :: 		
0x0060	0xB000      	BTFSC       R0, 0, 0
;__Lib_Math.c,188 :: 		
0x0062	0xD006      	BRA         $+14
;__Lib_Math.c,189 :: 		
0x0064	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,190 :: 		
0x0066	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,191 :: 		
0x0068	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,192 :: 		
0x006A	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,193 :: 		
0x006C	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,194 :: 		
0x006E	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,195 :: 		
0x0070	0x0000      	NOP
;__Lib_Math.c,197 :: 		
L_end_Div_16x16_S_L:
0x0072	0x0012      	RETURN      0
; end of _Div_16x16_S_L
_Div_16x16_S:
;__Lib_Math.c,200 :: 		
;__Lib_Math.c,208 :: 		
0x0074	0x5004      	MOVF        R4, 0 
0x0076	0x0A00      	XORLW       0
0x0078	0xE108      	BNZ         L_Div_16x16_S0
;__Lib_Math.c,209 :: 		
0x007A	0x5005      	MOVF        R5, 0 
0x007C	0x0A00      	XORLW       0
0x007E	0xE105      	BNZ         L_Div_16x16_S1
;__Lib_Math.c,210 :: 		
0x0080	0x0EFF      	MOVLW       255
0x0082	0x6E00      	MOVWF       R0 
;__Lib_Math.c,211 :: 		
0x0084	0x0E7F      	MOVLW       127
0x0086	0x6E01      	MOVWF       R1 
;__Lib_Math.c,212 :: 		
0x0088	0xD057      	BRA         L_end_Div_16x16_S
;__Lib_Math.c,213 :: 		
L_Div_16x16_S1:
L_Div_16x16_S0:
;__Lib_Math.c,216 :: 		
0x008A	0x6A0D      	CLRF        R13, 0
;__Lib_Math.c,217 :: 		
0x008C	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,218 :: 		
0x008E	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,219 :: 		
0x0090	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,220 :: 		
0x0092	0x1000      	IORWF       R0, 0, 0
;__Lib_Math.c,221 :: 		
0x0094	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,222 :: 		
0x0096	0x0C00      	RETLW       0
;__Lib_Math.c,224 :: 		
0x0098	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,225 :: 		
0x009A	0x1805      	XORWF       R5, 0, 0
;__Lib_Math.c,226 :: 		
0x009C	0x6E0A      	MOVWF       R10, 0
;__Lib_Math.c,227 :: 		
0x009E	0xBE0A      	BTFSC       R10, 7, 0
;__Lib_Math.c,228 :: 		
0x00A0	0x1E0D      	COMF        R13, 1, 0
;__Lib_Math.c,230 :: 		
0x00A2	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,232 :: 		
0x00A4	0xAE05      	BTFSS       R5, 7, 0
;__Lib_Math.c,233 :: 		
0x00A6	0xD005      	BRA         $+12
;__Lib_Math.c,235 :: 		
0x00A8	0x1E04      	COMF        R4, 1, 0
;__Lib_Math.c,236 :: 		
0x00AA	0x1E05      	COMF        R5, 1, 0
;__Lib_Math.c,237 :: 		
0x00AC	0x2A04      	INCF        R4, 1, 0
;__Lib_Math.c,238 :: 		
0x00AE	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,239 :: 		
0x00B0	0x2A05      	INCF        R5, 1, 0
;__Lib_Math.c,241 :: 		
0x00B2	0xAE01      	BTFSS       R1, 7, 0
;__Lib_Math.c,242 :: 		
0x00B4	0xD005      	BRA         $+12
;__Lib_Math.c,244 :: 		
0x00B6	0x1E00      	COMF        R0, 1, 0
;__Lib_Math.c,245 :: 		
0x00B8	0x1E01      	COMF        R1, 1, 0
;__Lib_Math.c,246 :: 		
0x00BA	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,247 :: 		
0x00BC	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,248 :: 		
0x00BE	0x2A01      	INCF        R1, 1, 0
;__Lib_Math.c,250 :: 		
0x00C0	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,251 :: 		
0x00C2	0x1005      	IORWF       R5, 0, 0
;__Lib_Math.c,252 :: 		
0x00C4	0x6E0A      	MOVWF       R10, 0
;__Lib_Math.c,253 :: 		
0x00C6	0xBE0A      	BTFSC       R10, 7, 0
;__Lib_Math.c,254 :: 		
0x00C8	0xD010      	BRA         $+34
;__Lib_Math.c,256 :: 		
0x00CA	0xDFA8      	RCALL       _Div_16x16_S_L
;__Lib_Math.c,258 :: 		
0x00CC	0xB00B      	BTFSC       R11, 0, 0
;__Lib_Math.c,259 :: 		
0x00CE	0xD020      	BRA         $+66
;__Lib_Math.c,261 :: 		
0x00D0	0xAE0D      	BTFSS       R13, 7, 0
;__Lib_Math.c,262 :: 		
0x00D2	0x0C00      	RETLW       0
;__Lib_Math.c,264 :: 		
0x00D4	0x1E00      	COMF        R0, 1, 0
;__Lib_Math.c,265 :: 		
0x00D6	0x1E01      	COMF        R1, 1, 0
;__Lib_Math.c,266 :: 		
0x00D8	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,267 :: 		
0x00DA	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,268 :: 		
0x00DC	0x2A01      	INCF        R1, 1, 0
;__Lib_Math.c,270 :: 		
0x00DE	0x1E08      	COMF        R8, 1, 0
;__Lib_Math.c,271 :: 		
0x00E0	0x1E09      	COMF        R9, 1, 0
;__Lib_Math.c,272 :: 		
0x00E2	0x2A08      	INCF        R8, 1, 0
;__Lib_Math.c,273 :: 		
0x00E4	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,274 :: 		
0x00E6	0x2A09      	INCF        R9, 1, 0
;__Lib_Math.c,276 :: 		
0x00E8	0x0C00      	RETLW       0
;__Lib_Math.c,278 :: 		
0x00EA	0xAE05      	BTFSS       R5, 7, 0
;__Lib_Math.c,279 :: 		
0x00EC	0xD00D      	BRA         $+28
;__Lib_Math.c,280 :: 		
0x00EE	0xBE01      	BTFSC       R1, 7, 0
;__Lib_Math.c,281 :: 		
0x00F0	0xD007      	BRA         $+16
;__Lib_Math.c,282 :: 		
0x00F2	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,283 :: 		
0x00F4	0x6E09      	MOVWF       R9, 0
;__Lib_Math.c,284 :: 		
0x00F6	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,285 :: 		
0x00F8	0x6E08      	MOVWF       R8, 0
;__Lib_Math.c,286 :: 		
0x00FA	0x6A01      	CLRF        R1, 0
;__Lib_Math.c,287 :: 		
0x00FC	0x6A00      	CLRF        R0, 0
;__Lib_Math.c,288 :: 		
0x00FE	0xD7E8      	BRA         $-46
;__Lib_Math.c,289 :: 		
0x0100	0x6A01      	CLRF        R1, 0
;__Lib_Math.c,290 :: 		
0x0102	0x6A00      	CLRF        R0, 0
;__Lib_Math.c,291 :: 		
0x0104	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,292 :: 		
0x0106	0x0C00      	RETLW       0
;__Lib_Math.c,294 :: 		
0x0108	0x1E01      	COMF        R1, 1, 0
;__Lib_Math.c,295 :: 		
0x010A	0x1E00      	COMF        R0, 1, 0
;__Lib_Math.c,296 :: 		
0x010C	0x2A0B      	INCF        R11, 1, 0
;__Lib_Math.c,297 :: 		
0x010E	0xD7DD      	BRA         $-68
;__Lib_Math.c,299 :: 		
0x0110	0x2A08      	INCF        R8, 1, 0
;__Lib_Math.c,300 :: 		
0x0112	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,301 :: 		
0x0114	0x2A09      	INCF        R9, 1, 0
;__Lib_Math.c,302 :: 		
0x0116	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,303 :: 		
0x0118	0x5C08      	SUBWF       R8, 0, 0
;__Lib_Math.c,304 :: 		
0x011A	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_Math.c,305 :: 		
0x011C	0xD7D9      	BRA         $-76
;__Lib_Math.c,306 :: 		
0x011E	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,307 :: 		
0x0120	0x5C09      	SUBWF       R9, 0, 0
;__Lib_Math.c,308 :: 		
0x0122	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_Math.c,309 :: 		
0x0124	0xD7D5      	BRA         $-84
;__Lib_Math.c,310 :: 		
0x0126	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,311 :: 		
0x0128	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,312 :: 		
0x012A	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,313 :: 		
0x012C	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,314 :: 		
0x012E	0x2A01      	INCF        R1, 1, 0
;__Lib_Math.c,315 :: 		
0x0130	0xAE01      	BTFSS       R1, 7, 0
;__Lib_Math.c,316 :: 		
0x0132	0xD7CE      	BRA         $-98
;__Lib_Math.c,317 :: 		
0x0134	0x0000      	NOP
;__Lib_Math.c,318 :: 		
0x0136	0x0CFF      	RETLW       255
;__Lib_Math.c,320 :: 		
L_end_Div_16x16_S:
0x0138	0x0012      	RETURN      0
; end of _Div_16x16_S
_Delay_22us:
;__Lib_Delays.c,15 :: 		void Delay_22us() {
;__Lib_Delays.c,16 :: 		Delay_us(22);
0x013A	0x0E0E      	MOVLW       14
0x013C	0x6E0D      	MOVWF       R13, 0
L_Delay_22us1:
0x013E	0x2E0D      	DECFSZ      R13, 1, 0
0x0140	0xD7FE      	BRA         L_Delay_22us1
0x0142	0x0000      	NOP
;__Lib_Delays.c,17 :: 		}
L_end_Delay_22us:
0x0144	0x0012      	RETURN      0
; end of _Delay_22us
_get7SegVal:
;TestMicroC.c,82 :: 		unsigned char get7SegVal(unsigned char input_num)
;TestMicroC.c,84 :: 		switch(input_num)
0x0146	0xD06E      	BRA         L_get7SegVal0
;TestMicroC.c,86 :: 		case 0b000000: return 0; // 0
L_get7SegVal2:
0x0148	0x6A00      	CLRF        R0 
0x014A	0xD0DA      	BRA         L_end_get7SegVal
;TestMicroC.c,87 :: 		case 0b000001: return 1; // 1
L_get7SegVal3:
0x014C	0x0E01      	MOVLW       1
0x014E	0x6E00      	MOVWF       R0 
0x0150	0xD0D7      	BRA         L_end_get7SegVal
;TestMicroC.c,88 :: 		case 0b000010: return 2; // 2
L_get7SegVal4:
0x0152	0x0E02      	MOVLW       2
0x0154	0x6E00      	MOVWF       R0 
0x0156	0xD0D4      	BRA         L_end_get7SegVal
;TestMicroC.c,89 :: 		case 0b000011: return 3; // 3
L_get7SegVal5:
0x0158	0x0E03      	MOVLW       3
0x015A	0x6E00      	MOVWF       R0 
0x015C	0xD0D1      	BRA         L_end_get7SegVal
;TestMicroC.c,90 :: 		case 0b000100: return 4; // 4
L_get7SegVal6:
0x015E	0x0E04      	MOVLW       4
0x0160	0x6E00      	MOVWF       R0 
0x0162	0xD0CE      	BRA         L_end_get7SegVal
;TestMicroC.c,91 :: 		case 0b000101: return 5; // 5
L_get7SegVal7:
0x0164	0x0E05      	MOVLW       5
0x0166	0x6E00      	MOVWF       R0 
0x0168	0xD0CB      	BRA         L_end_get7SegVal
;TestMicroC.c,92 :: 		case 0b000110: return 6; // 6
L_get7SegVal8:
0x016A	0x0E06      	MOVLW       6
0x016C	0x6E00      	MOVWF       R0 
0x016E	0xD0C8      	BRA         L_end_get7SegVal
;TestMicroC.c,93 :: 		case 0b000111: return 7; // 7
L_get7SegVal9:
0x0170	0x0E07      	MOVLW       7
0x0172	0x6E00      	MOVWF       R0 
0x0174	0xD0C5      	BRA         L_end_get7SegVal
;TestMicroC.c,94 :: 		case 0b001000: return 8; // 8
L_get7SegVal10:
0x0176	0x0E08      	MOVLW       8
0x0178	0x6E00      	MOVWF       R0 
0x017A	0xD0C2      	BRA         L_end_get7SegVal
;TestMicroC.c,95 :: 		case 0b001001: return 9; // 9
L_get7SegVal11:
0x017C	0x0E09      	MOVLW       9
0x017E	0x6E00      	MOVWF       R0 
0x0180	0xD0BF      	BRA         L_end_get7SegVal
;TestMicroC.c,96 :: 		case 0b001010: return 10; // A
L_get7SegVal12:
0x0182	0x0E0A      	MOVLW       10
0x0184	0x6E00      	MOVWF       R0 
0x0186	0xD0BC      	BRA         L_end_get7SegVal
;TestMicroC.c,97 :: 		case 0b001011: return 11; // B
L_get7SegVal13:
0x0188	0x0E0B      	MOVLW       11
0x018A	0x6E00      	MOVWF       R0 
0x018C	0xD0B9      	BRA         L_end_get7SegVal
;TestMicroC.c,98 :: 		case 0b001100: return 12; // C
L_get7SegVal14:
0x018E	0x0E0C      	MOVLW       12
0x0190	0x6E00      	MOVWF       R0 
0x0192	0xD0B6      	BRA         L_end_get7SegVal
;TestMicroC.c,99 :: 		case 0b001101: return 13; // D
L_get7SegVal15:
0x0194	0x0E0D      	MOVLW       13
0x0196	0x6E00      	MOVWF       R0 
0x0198	0xD0B3      	BRA         L_end_get7SegVal
;TestMicroC.c,100 :: 		case 0b001110: return 14; // E
L_get7SegVal16:
0x019A	0x0E0E      	MOVLW       14
0x019C	0x6E00      	MOVWF       R0 
0x019E	0xD0B0      	BRA         L_end_get7SegVal
;TestMicroC.c,101 :: 		case 0b001111: return 15; // F
L_get7SegVal17:
0x01A0	0x0E0F      	MOVLW       15
0x01A2	0x6E00      	MOVWF       R0 
0x01A4	0xD0AD      	BRA         L_end_get7SegVal
;TestMicroC.c,102 :: 		case 0b010000: return 16; // G
L_get7SegVal18:
0x01A6	0x0E10      	MOVLW       16
0x01A8	0x6E00      	MOVWF       R0 
0x01AA	0xD0AA      	BRA         L_end_get7SegVal
;TestMicroC.c,103 :: 		case 0b010001: return 17; // H
L_get7SegVal19:
0x01AC	0x0E11      	MOVLW       17
0x01AE	0x6E00      	MOVWF       R0 
0x01B0	0xD0A7      	BRA         L_end_get7SegVal
;TestMicroC.c,104 :: 		case 0b010010: return 18; // I
L_get7SegVal20:
0x01B2	0x0E12      	MOVLW       18
0x01B4	0x6E00      	MOVWF       R0 
0x01B6	0xD0A4      	BRA         L_end_get7SegVal
;TestMicroC.c,105 :: 		case 0b010011: return 19; // J
L_get7SegVal21:
0x01B8	0x0E13      	MOVLW       19
0x01BA	0x6E00      	MOVWF       R0 
0x01BC	0xD0A1      	BRA         L_end_get7SegVal
;TestMicroC.c,106 :: 		case 0b010100: return 20; // K
L_get7SegVal22:
0x01BE	0x0E14      	MOVLW       20
0x01C0	0x6E00      	MOVWF       R0 
0x01C2	0xD09E      	BRA         L_end_get7SegVal
;TestMicroC.c,107 :: 		case 0b010101: return 21; // L
L_get7SegVal23:
0x01C4	0x0E15      	MOVLW       21
0x01C6	0x6E00      	MOVWF       R0 
0x01C8	0xD09B      	BRA         L_end_get7SegVal
;TestMicroC.c,108 :: 		case 0b010110: return 22; // M
L_get7SegVal24:
0x01CA	0x0E16      	MOVLW       22
0x01CC	0x6E00      	MOVWF       R0 
0x01CE	0xD098      	BRA         L_end_get7SegVal
;TestMicroC.c,109 :: 		case 0b010111: return 23; // N
L_get7SegVal25:
0x01D0	0x0E17      	MOVLW       23
0x01D2	0x6E00      	MOVWF       R0 
0x01D4	0xD095      	BRA         L_end_get7SegVal
;TestMicroC.c,110 :: 		case 0b011000: return 24; // O
L_get7SegVal26:
0x01D6	0x0E18      	MOVLW       24
0x01D8	0x6E00      	MOVWF       R0 
0x01DA	0xD092      	BRA         L_end_get7SegVal
;TestMicroC.c,111 :: 		case 0b011001: return 25; // P
L_get7SegVal27:
0x01DC	0x0E19      	MOVLW       25
0x01DE	0x6E00      	MOVWF       R0 
0x01E0	0xD08F      	BRA         L_end_get7SegVal
;TestMicroC.c,112 :: 		case 0b011010: return 26; // Q
L_get7SegVal28:
0x01E2	0x0E1A      	MOVLW       26
0x01E4	0x6E00      	MOVWF       R0 
0x01E6	0xD08C      	BRA         L_end_get7SegVal
;TestMicroC.c,113 :: 		case 0b011011: return 27; // R
L_get7SegVal29:
0x01E8	0x0E1B      	MOVLW       27
0x01EA	0x6E00      	MOVWF       R0 
0x01EC	0xD089      	BRA         L_end_get7SegVal
;TestMicroC.c,114 :: 		case 0b011100: return 28; // S
L_get7SegVal30:
0x01EE	0x0E1C      	MOVLW       28
0x01F0	0x6E00      	MOVWF       R0 
0x01F2	0xD086      	BRA         L_end_get7SegVal
;TestMicroC.c,115 :: 		case 0b011101: return 29; // T
L_get7SegVal31:
0x01F4	0x0E1D      	MOVLW       29
0x01F6	0x6E00      	MOVWF       R0 
0x01F8	0xD083      	BRA         L_end_get7SegVal
;TestMicroC.c,116 :: 		case 0b011110: return 30; // U
L_get7SegVal32:
0x01FA	0x0E1E      	MOVLW       30
0x01FC	0x6E00      	MOVWF       R0 
0x01FE	0xD080      	BRA         L_end_get7SegVal
;TestMicroC.c,117 :: 		case 0b011111: return 31; // V
L_get7SegVal33:
0x0200	0x0E1F      	MOVLW       31
0x0202	0x6E00      	MOVWF       R0 
0x0204	0xD07D      	BRA         L_end_get7SegVal
;TestMicroC.c,118 :: 		case 0b100000: return 32; // W
L_get7SegVal34:
0x0206	0x0E20      	MOVLW       32
0x0208	0x6E00      	MOVWF       R0 
0x020A	0xD07A      	BRA         L_end_get7SegVal
;TestMicroC.c,119 :: 		case 0b100001: return 33; // X
L_get7SegVal35:
0x020C	0x0E21      	MOVLW       33
0x020E	0x6E00      	MOVWF       R0 
0x0210	0xD077      	BRA         L_end_get7SegVal
;TestMicroC.c,120 :: 		case 0b100010: return 34; // Y
L_get7SegVal36:
0x0212	0x0E22      	MOVLW       34
0x0214	0x6E00      	MOVWF       R0 
0x0216	0xD074      	BRA         L_end_get7SegVal
;TestMicroC.c,121 :: 		case 0b100011: return 35; // Z
L_get7SegVal37:
0x0218	0x0E23      	MOVLW       35
0x021A	0x6E00      	MOVWF       R0 
0x021C	0xD071      	BRA         L_end_get7SegVal
;TestMicroC.c,122 :: 		default: return 255; // Return 255 (or an error value) for invalid input
L_get7SegVal38:
0x021E	0x0EFF      	MOVLW       255
0x0220	0x6E00      	MOVWF       R0 
0x0222	0xD06E      	BRA         L_end_get7SegVal
;TestMicroC.c,123 :: 		}
L_get7SegVal0:
0x0224	0x0101      	MOVLB       1
0x0226	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x0228	0x0A00      	XORLW       0
0x022A	0xE08E      	BZ          L_get7SegVal2
0x022C	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x022E	0x0A01      	XORLW       1
0x0230	0xE08D      	BZ          L_get7SegVal3
0x0232	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x0234	0x0A02      	XORLW       2
0x0236	0xE08D      	BZ          L_get7SegVal4
0x0238	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x023A	0x0A03      	XORLW       3
0x023C	0xE08D      	BZ          L_get7SegVal5
0x023E	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x0240	0x0A04      	XORLW       4
0x0242	0xE08D      	BZ          L_get7SegVal6
0x0244	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x0246	0x0A05      	XORLW       5
0x0248	0xE08D      	BZ          L_get7SegVal7
0x024A	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x024C	0x0A06      	XORLW       6
0x024E	0xE08D      	BZ          L_get7SegVal8
0x0250	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x0252	0x0A07      	XORLW       7
0x0254	0xE08D      	BZ          L_get7SegVal9
0x0256	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x0258	0x0A08      	XORLW       8
0x025A	0xE08D      	BZ          L_get7SegVal10
0x025C	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x025E	0x0A09      	XORLW       9
0x0260	0xE08D      	BZ          L_get7SegVal11
0x0262	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x0264	0x0A0A      	XORLW       10
0x0266	0xE08D      	BZ          L_get7SegVal12
0x0268	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x026A	0x0A0B      	XORLW       11
0x026C	0xE08D      	BZ          L_get7SegVal13
0x026E	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x0270	0x0A0C      	XORLW       12
0x0272	0xE08D      	BZ          L_get7SegVal14
0x0274	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x0276	0x0A0D      	XORLW       13
0x0278	0xE08D      	BZ          L_get7SegVal15
0x027A	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x027C	0x0A0E      	XORLW       14
0x027E	0xE08D      	BZ          L_get7SegVal16
0x0280	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x0282	0x0A0F      	XORLW       15
0x0284	0xE08D      	BZ          L_get7SegVal17
0x0286	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x0288	0x0A10      	XORLW       16
0x028A	0xE08D      	BZ          L_get7SegVal18
0x028C	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x028E	0x0A11      	XORLW       17
0x0290	0xE08D      	BZ          L_get7SegVal19
0x0292	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x0294	0x0A12      	XORLW       18
0x0296	0xE08D      	BZ          L_get7SegVal20
0x0298	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x029A	0x0A13      	XORLW       19
0x029C	0xE08D      	BZ          L_get7SegVal21
0x029E	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x02A0	0x0A14      	XORLW       20
0x02A2	0xE08D      	BZ          L_get7SegVal22
0x02A4	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x02A6	0x0A15      	XORLW       21
0x02A8	0xE08D      	BZ          L_get7SegVal23
0x02AA	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x02AC	0x0A16      	XORLW       22
0x02AE	0xE08D      	BZ          L_get7SegVal24
0x02B0	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x02B2	0x0A17      	XORLW       23
0x02B4	0xE08D      	BZ          L_get7SegVal25
0x02B6	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x02B8	0x0A18      	XORLW       24
0x02BA	0xE08D      	BZ          L_get7SegVal26
0x02BC	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x02BE	0x0A19      	XORLW       25
0x02C0	0xE08D      	BZ          L_get7SegVal27
0x02C2	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x02C4	0x0A1A      	XORLW       26
0x02C6	0xE08D      	BZ          L_get7SegVal28
0x02C8	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x02CA	0x0A1B      	XORLW       27
0x02CC	0xE08D      	BZ          L_get7SegVal29
0x02CE	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x02D0	0x0A1C      	XORLW       28
0x02D2	0xE08D      	BZ          L_get7SegVal30
0x02D4	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x02D6	0x0A1D      	XORLW       29
0x02D8	0xE08D      	BZ          L_get7SegVal31
0x02DA	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x02DC	0x0A1E      	XORLW       30
0x02DE	0xE08D      	BZ          L_get7SegVal32
0x02E0	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x02E2	0x0A1F      	XORLW       31
0x02E4	0xE08D      	BZ          L_get7SegVal33
0x02E6	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x02E8	0x0A20      	XORLW       32
0x02EA	0xE08D      	BZ          L_get7SegVal34
0x02EC	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x02EE	0x0A21      	XORLW       33
0x02F0	0xE08D      	BZ          L_get7SegVal35
0x02F2	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x02F4	0x0A22      	XORLW       34
0x02F6	0xE08D      	BZ          L_get7SegVal36
0x02F8	0x511C      	MOVF        FARG_get7SegVal_input_num, 0, 1
0x02FA	0x0A23      	XORLW       35
0x02FC	0xE08D      	BZ          L_get7SegVal37
0x02FE	0xD78F      	BRA         L_get7SegVal38
;TestMicroC.c,124 :: 		}
L_end_get7SegVal:
0x0300	0x0012      	RETURN      0
; end of _get7SegVal
_getMorseCodeBinary:
;TestMicroC.c,173 :: 		unsigned char getMorseCodeBinary(unsigned char index)
;TestMicroC.c,175 :: 		unsigned char morseInput = 0;
0x0302	0x0101      	MOVLB       1
0x0304	0x6B1D      	CLRF        getMorseCodeBinary_morseInput_L0, 1
;TestMicroC.c,178 :: 		switch(index) {
0x0306	0xD06E      	BRA         L_getMorseCodeBinary53
;TestMicroC.c,179 :: 		case 0: morseInput = 0b000000; break;  // 0
L_getMorseCodeBinary55:
0x0308	0x6B1D      	CLRF        getMorseCodeBinary_morseInput_L0, 1
0x030A	0xD0D9      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,180 :: 		case 1: morseInput = 0b000001; break;  // 1
L_getMorseCodeBinary56:
0x030C	0x0E01      	MOVLW       1
0x030E	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x0310	0xD0D6      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,181 :: 		case 2: morseInput = 0b000011; break;  // 2
L_getMorseCodeBinary57:
0x0312	0x0E03      	MOVLW       3
0x0314	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x0316	0xD0D3      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,182 :: 		case 3: morseInput = 0b000111; break;  // 3
L_getMorseCodeBinary58:
0x0318	0x0E07      	MOVLW       7
0x031A	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x031C	0xD0D0      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,183 :: 		case 4: morseInput = 0b001111; break;  // 4
L_getMorseCodeBinary59:
0x031E	0x0E0F      	MOVLW       15
0x0320	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x0322	0xD0CD      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,184 :: 		case 5: morseInput = 0b011111; break;  // 5
L_getMorseCodeBinary60:
0x0324	0x0E1F      	MOVLW       31
0x0326	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x0328	0xD0CA      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,185 :: 		case 6: morseInput = 0b100000; break;  // 6
L_getMorseCodeBinary61:
0x032A	0x0E20      	MOVLW       32
0x032C	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x032E	0xD0C7      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,186 :: 		case 7: morseInput = 0b100001; break;  // 7
L_getMorseCodeBinary62:
0x0330	0x0E21      	MOVLW       33
0x0332	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x0334	0xD0C4      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,187 :: 		case 8: morseInput = 0b100011; break;  // 8
L_getMorseCodeBinary63:
0x0336	0x0E23      	MOVLW       35
0x0338	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x033A	0xD0C1      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,188 :: 		case 9: morseInput = 0b100111; break;  // 9
L_getMorseCodeBinary64:
0x033C	0x0E27      	MOVLW       39
0x033E	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x0340	0xD0BE      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,189 :: 		case 10: morseInput = 0b001000; break; // A
L_getMorseCodeBinary65:
0x0342	0x0E08      	MOVLW       8
0x0344	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x0346	0xD0BB      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,190 :: 		case 11: morseInput = 0b100010; break; // B
L_getMorseCodeBinary66:
0x0348	0x0E22      	MOVLW       34
0x034A	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x034C	0xD0B8      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,191 :: 		case 12: morseInput = 0b101000; break; // C
L_getMorseCodeBinary67:
0x034E	0x0E28      	MOVLW       40
0x0350	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x0352	0xD0B5      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,192 :: 		case 13: morseInput = 0b101001; break; // D
L_getMorseCodeBinary68:
0x0354	0x0E29      	MOVLW       41
0x0356	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x0358	0xD0B2      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,193 :: 		case 14: morseInput = 0b101010; break; // E
L_getMorseCodeBinary69:
0x035A	0x0E2A      	MOVLW       42
0x035C	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x035E	0xD0AF      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,194 :: 		case 15: morseInput = 0b101011; break; // F
L_getMorseCodeBinary70:
0x0360	0x0E2B      	MOVLW       43
0x0362	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x0364	0xD0AC      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,195 :: 		case 16: morseInput = 0b101100; break; // G
L_getMorseCodeBinary71:
0x0366	0x0E2C      	MOVLW       44
0x0368	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x036A	0xD0A9      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,196 :: 		case 17: morseInput = 0b101101; break; // H
L_getMorseCodeBinary72:
0x036C	0x0E2D      	MOVLW       45
0x036E	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x0370	0xD0A6      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,197 :: 		case 18: morseInput = 0b110000; break; // I
L_getMorseCodeBinary73:
0x0372	0x0E30      	MOVLW       48
0x0374	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x0376	0xD0A3      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,198 :: 		case 19: morseInput = 0b110001; break; // J
L_getMorseCodeBinary74:
0x0378	0x0E31      	MOVLW       49
0x037A	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x037C	0xD0A0      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,199 :: 		case 20: morseInput = 0b110010; break; // K
L_getMorseCodeBinary75:
0x037E	0x0E32      	MOVLW       50
0x0380	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x0382	0xD09D      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,200 :: 		case 21: morseInput = 0b110011; break; // L
L_getMorseCodeBinary76:
0x0384	0x0E33      	MOVLW       51
0x0386	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x0388	0xD09A      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,201 :: 		case 22: morseInput = 0b110100; break; // M
L_getMorseCodeBinary77:
0x038A	0x0E34      	MOVLW       52
0x038C	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x038E	0xD097      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,202 :: 		case 23: morseInput = 0b110101; break; // N
L_getMorseCodeBinary78:
0x0390	0x0E35      	MOVLW       53
0x0392	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x0394	0xD094      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,203 :: 		case 24: morseInput = 0b110110; break; // O
L_getMorseCodeBinary79:
0x0396	0x0E36      	MOVLW       54
0x0398	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x039A	0xD091      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,204 :: 		case 25: morseInput = 0b110111; break; // P
L_getMorseCodeBinary80:
0x039C	0x0E37      	MOVLW       55
0x039E	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x03A0	0xD08E      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,205 :: 		case 26: morseInput = 0b111000; break; // Q
L_getMorseCodeBinary81:
0x03A2	0x0E38      	MOVLW       56
0x03A4	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x03A6	0xD08B      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,206 :: 		case 27: morseInput = 0b111001; break; // R
L_getMorseCodeBinary82:
0x03A8	0x0E39      	MOVLW       57
0x03AA	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x03AC	0xD088      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,207 :: 		case 28: morseInput = 0b111010; break; // S
L_getMorseCodeBinary83:
0x03AE	0x0E3A      	MOVLW       58
0x03B0	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x03B2	0xD085      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,208 :: 		case 29: morseInput = 0b111011; break; // T
L_getMorseCodeBinary84:
0x03B4	0x0E3B      	MOVLW       59
0x03B6	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x03B8	0xD082      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,209 :: 		case 30: morseInput = 0b111100; break; // U
L_getMorseCodeBinary85:
0x03BA	0x0E3C      	MOVLW       60
0x03BC	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x03BE	0xD07F      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,210 :: 		case 31: morseInput = 0b111101; break; // V
L_getMorseCodeBinary86:
0x03C0	0x0E3D      	MOVLW       61
0x03C2	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x03C4	0xD07C      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,211 :: 		case 32: morseInput = 0b111110; break; // W
L_getMorseCodeBinary87:
0x03C6	0x0E3E      	MOVLW       62
0x03C8	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x03CA	0xD079      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,212 :: 		case 33: morseInput = 0b111111; break; // X
L_getMorseCodeBinary88:
0x03CC	0x0E3F      	MOVLW       63
0x03CE	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x03D0	0xD076      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,213 :: 		case 34: morseInput = 0b000100; break; // Y
L_getMorseCodeBinary89:
0x03D2	0x0E04      	MOVLW       4
0x03D4	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x03D6	0xD073      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,214 :: 		case 35: morseInput = 0b000101; break; // Z
L_getMorseCodeBinary90:
0x03D8	0x0E05      	MOVLW       5
0x03DA	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x03DC	0xD070      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,215 :: 		default: morseInput = 255; break;  // Invalid Morse code
L_getMorseCodeBinary91:
0x03DE	0x0EFF      	MOVLW       255
0x03E0	0x6F1D      	MOVWF       getMorseCodeBinary_morseInput_L0, 1
0x03E2	0xD06D      	BRA         L_getMorseCodeBinary54
;TestMicroC.c,216 :: 		}
L_getMorseCodeBinary53:
0x03E4	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x03E6	0x0A00      	XORLW       0
0x03E8	0xE08F      	BZ          L_getMorseCodeBinary55
0x03EA	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x03EC	0x0A01      	XORLW       1
0x03EE	0xE08E      	BZ          L_getMorseCodeBinary56
0x03F0	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x03F2	0x0A02      	XORLW       2
0x03F4	0xE08E      	BZ          L_getMorseCodeBinary57
0x03F6	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x03F8	0x0A03      	XORLW       3
0x03FA	0xE08E      	BZ          L_getMorseCodeBinary58
0x03FC	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x03FE	0x0A04      	XORLW       4
0x0400	0xE08E      	BZ          L_getMorseCodeBinary59
0x0402	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x0404	0x0A05      	XORLW       5
0x0406	0xE08E      	BZ          L_getMorseCodeBinary60
0x0408	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x040A	0x0A06      	XORLW       6
0x040C	0xE08E      	BZ          L_getMorseCodeBinary61
0x040E	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x0410	0x0A07      	XORLW       7
0x0412	0xE08E      	BZ          L_getMorseCodeBinary62
0x0414	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x0416	0x0A08      	XORLW       8
0x0418	0xE08E      	BZ          L_getMorseCodeBinary63
0x041A	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x041C	0x0A09      	XORLW       9
0x041E	0xE08E      	BZ          L_getMorseCodeBinary64
0x0420	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x0422	0x0A0A      	XORLW       10
0x0424	0xE08E      	BZ          L_getMorseCodeBinary65
0x0426	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x0428	0x0A0B      	XORLW       11
0x042A	0xE08E      	BZ          L_getMorseCodeBinary66
0x042C	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x042E	0x0A0C      	XORLW       12
0x0430	0xE08E      	BZ          L_getMorseCodeBinary67
0x0432	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x0434	0x0A0D      	XORLW       13
0x0436	0xE08E      	BZ          L_getMorseCodeBinary68
0x0438	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x043A	0x0A0E      	XORLW       14
0x043C	0xE08E      	BZ          L_getMorseCodeBinary69
0x043E	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x0440	0x0A0F      	XORLW       15
0x0442	0xE08E      	BZ          L_getMorseCodeBinary70
0x0444	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x0446	0x0A10      	XORLW       16
0x0448	0xE08E      	BZ          L_getMorseCodeBinary71
0x044A	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x044C	0x0A11      	XORLW       17
0x044E	0xE08E      	BZ          L_getMorseCodeBinary72
0x0450	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x0452	0x0A12      	XORLW       18
0x0454	0xE08E      	BZ          L_getMorseCodeBinary73
0x0456	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x0458	0x0A13      	XORLW       19
0x045A	0xE08E      	BZ          L_getMorseCodeBinary74
0x045C	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x045E	0x0A14      	XORLW       20
0x0460	0xE08E      	BZ          L_getMorseCodeBinary75
0x0462	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x0464	0x0A15      	XORLW       21
0x0466	0xE08E      	BZ          L_getMorseCodeBinary76
0x0468	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x046A	0x0A16      	XORLW       22
0x046C	0xE08E      	BZ          L_getMorseCodeBinary77
0x046E	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x0470	0x0A17      	XORLW       23
0x0472	0xE08E      	BZ          L_getMorseCodeBinary78
0x0474	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x0476	0x0A18      	XORLW       24
0x0478	0xE08E      	BZ          L_getMorseCodeBinary79
0x047A	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x047C	0x0A19      	XORLW       25
0x047E	0xE08E      	BZ          L_getMorseCodeBinary80
0x0480	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x0482	0x0A1A      	XORLW       26
0x0484	0xE08E      	BZ          L_getMorseCodeBinary81
0x0486	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x0488	0x0A1B      	XORLW       27
0x048A	0xE08E      	BZ          L_getMorseCodeBinary82
0x048C	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x048E	0x0A1C      	XORLW       28
0x0490	0xE08E      	BZ          L_getMorseCodeBinary83
0x0492	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x0494	0x0A1D      	XORLW       29
0x0496	0xE08E      	BZ          L_getMorseCodeBinary84
0x0498	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x049A	0x0A1E      	XORLW       30
0x049C	0xE08E      	BZ          L_getMorseCodeBinary85
0x049E	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x04A0	0x0A1F      	XORLW       31
0x04A2	0xE08E      	BZ          L_getMorseCodeBinary86
0x04A4	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x04A6	0x0A20      	XORLW       32
0x04A8	0xE08E      	BZ          L_getMorseCodeBinary87
0x04AA	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x04AC	0x0A21      	XORLW       33
0x04AE	0xE08E      	BZ          L_getMorseCodeBinary88
0x04B0	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x04B2	0x0A22      	XORLW       34
0x04B4	0xE08E      	BZ          L_getMorseCodeBinary89
0x04B6	0x511C      	MOVF        FARG_getMorseCodeBinary_index, 0, 1
0x04B8	0x0A23      	XORLW       35
0x04BA	0xE08E      	BZ          L_getMorseCodeBinary90
0x04BC	0xD790      	BRA         L_getMorseCodeBinary91
L_getMorseCodeBinary54:
;TestMicroC.c,218 :: 		return morseInput;
0x04BE	0xF000C11D  	MOVFF       getMorseCodeBinary_morseInput_L0, R0
;TestMicroC.c,219 :: 		}
L_end_getMorseCodeBinary:
0x04C2	0x0012      	RETURN      0
; end of _getMorseCodeBinary
_Mul_16X16_U:
;__Lib_Math.c,440 :: 		
;__Lib_Math.c,447 :: 		
0x04C4	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,448 :: 		
0x04C6	0x6A0A      	CLRF        R10, 0
;__Lib_Math.c,449 :: 		
0x04C8	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,450 :: 		
0x04CA	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,451 :: 		
0x04CC	0x0204      	MULWF       R4, 0
;__Lib_Math.c,453 :: 		
0x04CE	0xF009CFF4  	MOVFF       PRODH, R9
;__Lib_Math.c,454 :: 		
0x04D2	0xF008CFF3  	MOVFF       PRODL, R8
;__Lib_Math.c,455 :: 		
0x04D6	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,456 :: 		
0x04D8	0x0205      	MULWF       R5, 0
;__Lib_Math.c,458 :: 		
0x04DA	0xF00BCFF4  	MOVFF       PRODH, R11
;__Lib_Math.c,459 :: 		
0x04DE	0xF00ACFF3  	MOVFF       PRODL, R10
;__Lib_Math.c,460 :: 		
0x04E2	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,461 :: 		
0x04E4	0x0205      	MULWF       R5, 0
;__Lib_Math.c,463 :: 		
0x04E6	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,464 :: 		
0x04E8	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,465 :: 		
0x04EA	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,466 :: 		
0x04EC	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,467 :: 		
0x04EE	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,468 :: 		
0x04F0	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,469 :: 		
0x04F2	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,470 :: 		
0x04F4	0x0204      	MULWF       R4, 0
;__Lib_Math.c,472 :: 		
0x04F6	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,473 :: 		
0x04F8	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,474 :: 		
0x04FA	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,475 :: 		
0x04FC	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,476 :: 		
0x04FE	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,477 :: 		
0x0500	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,479 :: 		
0x0502	0xF000C008  	MOVFF       R8, R0
;__Lib_Math.c,480 :: 		
0x0506	0xF001C009  	MOVFF       R9, R1
;__Lib_Math.c,481 :: 		
0x050A	0xF002C00A  	MOVFF       R10, R2
;__Lib_Math.c,482 :: 		
0x050E	0xF003C00B  	MOVFF       R11, R3
;__Lib_Math.c,485 :: 		
L_end_Mul_16X16_U:
0x0512	0x0012      	RETURN      0
; end of _Mul_16X16_U
_ADC_Read:
;__Lib_ADC_A_C.c,65 :: 		
;__Lib_ADC_A_C.c,68 :: 		
0x0514	0x6AC2      	CLRF        ADCON0 
;__Lib_ADC_A_C.c,69 :: 		
0x0516	0x0EC0      	MOVLW       192
0x0518	0x12C2      	IORWF       ADCON0, 1 
;__Lib_ADC_A_C.c,70 :: 		
0x051A	0x0101      	MOVLB       1
0x051C	0x1D11      	COMF        _vref_mask, 0, 1
0x051E	0x6E00      	MOVWF       R0 
0x0520	0x5000      	MOVF        R0, 0 
0x0522	0x16C1      	ANDWF       ADCON1, 1 
;__Lib_ADC_A_C.c,71 :: 		
0x0524	0x8CC1      	BSF         ADCON1, 6 
;__Lib_ADC_A_C.c,73 :: 		
0x0526	0x8EC1      	BSF         ADCON1, 7 
;__Lib_ADC_A_C.c,74 :: 		
0x0528	0xF000C118  	MOVFF       FARG_ADC_Read_channel, R0
0x052C	0x3600      	RLCF        R0, 1 
0x052E	0x9000      	BCF         R0, 0 
0x0530	0x3600      	RLCF        R0, 1 
0x0532	0x9000      	BCF         R0, 0 
0x0534	0x3600      	RLCF        R0, 1 
0x0536	0x9000      	BCF         R0, 0 
0x0538	0x5000      	MOVF        R0, 0 
0x053A	0x12C2      	IORWF       ADCON0, 1 
;__Lib_ADC_A_C.c,75 :: 		
0x053C	0x80C2      	BSF         ADCON0, 0 
;__Lib_ADC_A_C.c,76 :: 		
0x053E	0xDDFD      	RCALL       _Delay_22us
;__Lib_ADC_A_C.c,77 :: 		
0x0540	0x84C2      	BSF         ADCON0, 2 
;__Lib_ADC_A_C.c,78 :: 		
L_ADC_Read2:
0x0542	0xA4C2      	BTFSS       ADCON0, 2 
0x0544	0xD001      	BRA         L_ADC_Read3
;__Lib_ADC_A_C.c,79 :: 		
0x0546	0xD7FD      	BRA         L_ADC_Read2
L_ADC_Read3:
;__Lib_ADC_A_C.c,81 :: 		
0x0548	0xF001CFC4  	MOVFF       ADRESH, R1
0x054C	0x6A00      	CLRF        R0 
;__Lib_ADC_A_C.c,82 :: 		
0x054E	0x50C3      	MOVF        ADRESL, 0 
0x0550	0x1200      	IORWF       R0, 1 
0x0552	0x0E00      	MOVLW       0
0x0554	0x1201      	IORWF       R1, 1 
;__Lib_ADC_A_C.c,83 :: 		
0x0556	0x90C2      	BCF         ADCON0, 0 
;__Lib_ADC_A_C.c,85 :: 		
;__Lib_ADC_A_C.c,86 :: 		
L_end_ADC_Read:
0x0558	0x0012      	RETURN      0
; end of _ADC_Read
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x055A	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x055C	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0560	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0562	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0564	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0566	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0568	0x0012      	RETURN      0
; end of ___CC2DW
_morseEncode:
;TestMicroC.c,142 :: 		void morseEncode(unsigned char inputChar)
;TestMicroC.c,145 :: 		unsigned char index = get7SegVal(inputChar); // Convert input to an index (0-35)
0x056A	0xF11CC118  	MOVFF       FARG_morseEncode_inputChar, FARG_get7SegVal_input_num
0x056E	0xDDEB      	RCALL       _get7SegVal
0x0570	0xF11BC000  	MOVFF       R0, morseEncode_index_L0
;TestMicroC.c,146 :: 		if (index >= 36) return; // Invalid input, ignore
0x0574	0x0E24      	MOVLW       36
0x0576	0x5C00      	SUBWF       R0, 0 
0x0578	0xE301      	BNC         L_morseEncode41
0x057A	0xD066      	BRA         L_end_morseEncode
L_morseEncode41:
;TestMicroC.c,149 :: 		for (i = 0; i < 6; i++)
0x057C	0x0101      	MOVLB       1
0x057E	0x6B1A      	CLRF        morseEncode_i_L0, 1
L_morseEncode42:
0x0580	0x0E06      	MOVLW       6
0x0582	0x5D1A      	SUBWF       morseEncode_i_L0, 0, 1
0x0584	0xE253      	BC          L_morseEncode43
;TestMicroC.c,151 :: 		char symbol = morseCodes[index][i];
0x0586	0x0E06      	MOVLW       6
0x0588	0x6E00      	MOVWF       R0 
0x058A	0x0E00      	MOVLW       0
0x058C	0x6E01      	MOVWF       R1 
0x058E	0xF004C11B  	MOVFF       morseEncode_index_L0, R4
0x0592	0x0E00      	MOVLW       0
0x0594	0x6E05      	MOVWF       R5 
0x0596	0xDF96      	RCALL       _Mul_16X16_U
0x0598	0x0E15      	MOVLW       _morseCodes
0x059A	0x2600      	ADDWF       R0, 1 
0x059C	0x0E00      	MOVLW       hi_addr(_morseCodes)
0x059E	0x2201      	ADDWFC      R1, 1 
0x05A0	0x511A      	MOVF        morseEncode_i_L0, 0, 1
0x05A2	0x2400      	ADDWF       R0, 0 
0x05A4	0x6EE9      	MOVWF       FSR0L 
0x05A6	0x0E00      	MOVLW       0
0x05A8	0x2001      	ADDWFC      R1, 0 
0x05AA	0x6EEA      	MOVWF       FSR0L+1 
0x05AC	0xF001CFEE  	MOVFF       POSTINC0, R1
0x05B0	0xF119C001  	MOVFF       R1, morseEncode_symbol_L1
;TestMicroC.c,152 :: 		if (symbol == '\0') break; // End of Morse code for this character
0x05B4	0x5001      	MOVF        R1, 0 
0x05B6	0x0A00      	XORLW       0
0x05B8	0xE101      	BNZ         L_morseEncode45
0x05BA	0xD038      	BRA         L_morseEncode43
L_morseEncode45:
;TestMicroC.c,154 :: 		if (symbol == '.')
0x05BC	0x5119      	MOVF        morseEncode_symbol_L1, 0, 1
0x05BE	0x0A2E      	XORLW       46
0x05C0	0xE111      	BNZ         L_morseEncode46
;TestMicroC.c,156 :: 		LATD = 0x80; // Represent dot (e.g., LED ON)
0x05C2	0x0E80      	MOVLW       128
0x05C4	0x6E8C      	MOVWF       LATD 
;TestMicroC.c,157 :: 		Delay_ms(500); // Duration for dot
0x05C6	0x0E06      	MOVLW       6
0x05C8	0x6E0B      	MOVWF       R11, 0
0x05CA	0x0E13      	MOVLW       19
0x05CC	0x6E0C      	MOVWF       R12, 0
0x05CE	0x0EAD      	MOVLW       173
0x05D0	0x6E0D      	MOVWF       R13, 0
L_morseEncode47:
0x05D2	0x2E0D      	DECFSZ      R13, 1, 0
0x05D4	0xD7FE      	BRA         L_morseEncode47
0x05D6	0x2E0C      	DECFSZ      R12, 1, 0
0x05D8	0xD7FC      	BRA         L_morseEncode47
0x05DA	0x2E0B      	DECFSZ      R11, 1, 0
0x05DC	0xD7FA      	BRA         L_morseEncode47
0x05DE	0x0000      	NOP
0x05E0	0x0000      	NOP
;TestMicroC.c,158 :: 		}
0x05E2	0xD013      	BRA         L_morseEncode48
L_morseEncode46:
;TestMicroC.c,159 :: 		else if (symbol == '-')
0x05E4	0x5119      	MOVF        morseEncode_symbol_L1, 0, 1
0x05E6	0x0A2D      	XORLW       45
0x05E8	0xE110      	BNZ         L_morseEncode49
;TestMicroC.c,161 :: 		LATD = 0x08; // Represent dash (e.g., LED ON)
0x05EA	0x0E08      	MOVLW       8
0x05EC	0x6E8C      	MOVWF       LATD 
;TestMicroC.c,162 :: 		Delay_ms(500); // Duration for dash
0x05EE	0x0E06      	MOVLW       6
0x05F0	0x6E0B      	MOVWF       R11, 0
0x05F2	0x0E13      	MOVLW       19
0x05F4	0x6E0C      	MOVWF       R12, 0
0x05F6	0x0EAD      	MOVLW       173
0x05F8	0x6E0D      	MOVWF       R13, 0
L_morseEncode50:
0x05FA	0x2E0D      	DECFSZ      R13, 1, 0
0x05FC	0xD7FE      	BRA         L_morseEncode50
0x05FE	0x2E0C      	DECFSZ      R12, 1, 0
0x0600	0xD7FC      	BRA         L_morseEncode50
0x0602	0x2E0B      	DECFSZ      R11, 1, 0
0x0604	0xD7FA      	BRA         L_morseEncode50
0x0606	0x0000      	NOP
0x0608	0x0000      	NOP
;TestMicroC.c,163 :: 		}
L_morseEncode49:
L_morseEncode48:
;TestMicroC.c,165 :: 		LATD = 0x00; // Turn off LED between signals
0x060A	0x6A8C      	CLRF        LATD 
;TestMicroC.c,166 :: 		Delay_ms(250); // Inter-element gap
0x060C	0x0E03      	MOVLW       3
0x060E	0x6E0B      	MOVWF       R11, 0
0x0610	0x0E8A      	MOVLW       138
0x0612	0x6E0C      	MOVWF       R12, 0
0x0614	0x0E55      	MOVLW       85
0x0616	0x6E0D      	MOVWF       R13, 0
L_morseEncode51:
0x0618	0x2E0D      	DECFSZ      R13, 1, 0
0x061A	0xD7FE      	BRA         L_morseEncode51
0x061C	0x2E0C      	DECFSZ      R12, 1, 0
0x061E	0xD7FC      	BRA         L_morseEncode51
0x0620	0x2E0B      	DECFSZ      R11, 1, 0
0x0622	0xD7FA      	BRA         L_morseEncode51
0x0624	0x0000      	NOP
0x0626	0x0000      	NOP
;TestMicroC.c,149 :: 		for (i = 0; i < 6; i++)
0x0628	0x2B1A      	INCF        morseEncode_i_L0, 1, 1
;TestMicroC.c,167 :: 		}
0x062A	0xD7AA      	BRA         L_morseEncode42
L_morseEncode43:
;TestMicroC.c,169 :: 		Delay_ms(300); // Gap between characters
0x062C	0x0E04      	MOVLW       4
0x062E	0x6E0B      	MOVWF       R11, 0
0x0630	0x0E0C      	MOVLW       12
0x0632	0x6E0C      	MOVWF       R12, 0
0x0634	0x0E33      	MOVLW       51
0x0636	0x6E0D      	MOVWF       R13, 0
L_morseEncode52:
0x0638	0x2E0D      	DECFSZ      R13, 1, 0
0x063A	0xD7FE      	BRA         L_morseEncode52
0x063C	0x2E0C      	DECFSZ      R12, 1, 0
0x063E	0xD7FC      	BRA         L_morseEncode52
0x0640	0x2E0B      	DECFSZ      R11, 1, 0
0x0642	0xD7FA      	BRA         L_morseEncode52
0x0644	0x0000      	NOP
0x0646	0x0000      	NOP
;TestMicroC.c,170 :: 		}
L_end_morseEncode:
0x0648	0x0012      	RETURN      0
; end of _morseEncode
_morseDecode:
;TestMicroC.c,221 :: 		unsigned char morseDecode(unsigned char morseInput)
;TestMicroC.c,225 :: 		decodedChar = 255;
0x064A	0x0EFF      	MOVLW       255
0x064C	0x0101      	MOVLB       1
0x064E	0x6F1A      	MOVWF       morseDecode_decodedChar_L0, 1
;TestMicroC.c,228 :: 		for (i = 0; i < 36; i++)
0x0650	0x6B19      	CLRF        morseDecode_i_L0, 1
L_morseDecode92:
0x0652	0x0E24      	MOVLW       36
0x0654	0x5D19      	SUBWF       morseDecode_i_L0, 0, 1
0x0656	0xE20B      	BC          L_morseDecode93
;TestMicroC.c,231 :: 		if (morseInput == getMorseCodeBinary(i))
0x0658	0xF11CC119  	MOVFF       morseDecode_i_L0, FARG_getMorseCodeBinary_index
0x065C	0xDE52      	RCALL       _getMorseCodeBinary
0x065E	0x5118      	MOVF        FARG_morseDecode_morseInput, 0, 1
0x0660	0x1800      	XORWF       R0, 0 
0x0662	0xE103      	BNZ         L_morseDecode95
;TestMicroC.c,233 :: 		decodedChar = i;  // Return the character index if a match is found
0x0664	0xF11AC119  	MOVFF       morseDecode_i_L0, morseDecode_decodedChar_L0
;TestMicroC.c,234 :: 		break;  // Exit loop once the character is found
0x0668	0xD002      	BRA         L_morseDecode93
;TestMicroC.c,235 :: 		}
L_morseDecode95:
;TestMicroC.c,228 :: 		for (i = 0; i < 36; i++)
0x066A	0x2B19      	INCF        morseDecode_i_L0, 1, 1
;TestMicroC.c,236 :: 		}
0x066C	0xD7F2      	BRA         L_morseDecode92
L_morseDecode93:
;TestMicroC.c,238 :: 		return decodedChar;
0x066E	0xF000C11A  	MOVFF       morseDecode_decodedChar_L0, R0
;TestMicroC.c,239 :: 		}
L_end_morseDecode:
0x0672	0x0012      	RETURN      0
; end of _morseDecode
_ceaserCipher:
;TestMicroC.c,126 :: 		unsigned char ceaserCipher(unsigned char inputChar, unsigned char shift, unsigned char en_de)
;TestMicroC.c,130 :: 		if (en_de == 0) // Encoding
0x0674	0x0101      	MOVLB       1
0x0676	0x511A      	MOVF        FARG_ceaserCipher_en_de, 0, 1
0x0678	0x0A00      	XORLW       0
0x067A	0xE112      	BNZ         L_ceaserCipher39
;TestMicroC.c,132 :: 		result = (inputChar + shift) % 36; // Shift forward and wrap around
0x067C	0x5119      	MOVF        FARG_ceaserCipher_shift, 0, 1
0x067E	0x2518      	ADDWF       FARG_ceaserCipher_inputChar, 0, 1
0x0680	0x6E00      	MOVWF       R0 
0x0682	0x6A01      	CLRF        R1 
0x0684	0x0E00      	MOVLW       0
0x0686	0x2201      	ADDWFC      R1, 1 
0x0688	0x0E24      	MOVLW       36
0x068A	0x6E04      	MOVWF       R4 
0x068C	0x0E00      	MOVLW       0
0x068E	0x6E05      	MOVWF       R5 
0x0690	0xDCF1      	RCALL       _Div_16x16_S
0x0692	0xF000C008  	MOVFF       R8, R0
0x0696	0xF001C009  	MOVFF       R9, R1
0x069A	0xF11BC000  	MOVFF       R0, ceaserCipher_result_L0
;TestMicroC.c,133 :: 		}
0x069E	0xD016      	BRA         L_ceaserCipher40
L_ceaserCipher39:
;TestMicroC.c,136 :: 		result = (inputChar + 36 - shift) % 36; // Shift backward and wrap around
0x06A0	0x0E24      	MOVLW       36
0x06A2	0x0101      	MOVLB       1
0x06A4	0x2518      	ADDWF       FARG_ceaserCipher_inputChar, 0, 1
0x06A6	0x6E00      	MOVWF       R0 
0x06A8	0x6A01      	CLRF        R1 
0x06AA	0x0E00      	MOVLW       0
0x06AC	0x2201      	ADDWFC      R1, 1 
0x06AE	0x5119      	MOVF        FARG_ceaserCipher_shift, 0, 1
0x06B0	0x5E00      	SUBWF       R0, 1 
0x06B2	0x0E00      	MOVLW       0
0x06B4	0x5A01      	SUBWFB      R1, 1 
0x06B6	0x0E24      	MOVLW       36
0x06B8	0x6E04      	MOVWF       R4 
0x06BA	0x0E00      	MOVLW       0
0x06BC	0x6E05      	MOVWF       R5 
0x06BE	0xDCDA      	RCALL       _Div_16x16_S
0x06C0	0xF000C008  	MOVFF       R8, R0
0x06C4	0xF001C009  	MOVFF       R9, R1
0x06C8	0xF11BC000  	MOVFF       R0, ceaserCipher_result_L0
;TestMicroC.c,137 :: 		}
L_ceaserCipher40:
;TestMicroC.c,139 :: 		return result;
0x06CC	0xF000C11B  	MOVFF       ceaserCipher_result_L0, R0
;TestMicroC.c,140 :: 		}
L_end_ceaserCipher:
0x06D0	0x0012      	RETURN      0
; end of _ceaserCipher
_main:
0x06D2	0xF005EC5F  	CALL        2750, 0
;TestMicroC.c,242 :: 		void main()
;TestMicroC.c,249 :: 		ADCON1 = 0x0E;  // Configure AN0 as analog, others as digital
0x06D6	0x0E0E      	MOVLW       14
0x06D8	0x6EC1      	MOVWF       ADCON1 
;TestMicroC.c,250 :: 		TRISA = 0x01;   // Set RA0 as input
0x06DA	0x0E01      	MOVLW       1
0x06DC	0x6E92      	MOVWF       TRISA 
;TestMicroC.c,251 :: 		TRISB = 0xFF;   // Configuring PORTB as input
0x06DE	0x0EFF      	MOVLW       255
0x06E0	0x6E93      	MOVWF       TRISB 
;TestMicroC.c,252 :: 		TRISC = 0x00;   // Set PORTC as output
0x06E2	0x6A94      	CLRF        TRISC 
;TestMicroC.c,253 :: 		TRISD = 0x00;   // Set PORTD as output
0x06E4	0x6A95      	CLRF        TRISD 
;TestMicroC.c,254 :: 		PORTC = 0x00;   // Clear PORTC
0x06E6	0x6A82      	CLRF        PORTC 
;TestMicroC.c,255 :: 		while (1)
L_main96:
;TestMicroC.c,257 :: 		adc_value = ADC_Read(0);  // Read analog value from AN0 (RA0)
0x06E8	0x0101      	MOVLB       1
0x06EA	0x6B18      	CLRF        FARG_ADC_Read_channel, 1
0x06EC	0xDF13      	RCALL       _ADC_Read
0x06EE	0xF112C000  	MOVFF       R0, main_adc_value_L0
0x06F2	0xF113C001  	MOVFF       R1, main_adc_value_L0+1
;TestMicroC.c,258 :: 		inputChar = PORTB & 0x3F;
0x06F6	0x0E3F      	MOVLW       63
0x06F8	0x1481      	ANDWF       PORTB, 0 
0x06FA	0x6F14      	MOVWF       main_inputChar_L0, 1
;TestMicroC.c,259 :: 		en_de = PORTB & 0x40;
0x06FC	0x0E40      	MOVLW       64
0x06FE	0x1481      	ANDWF       PORTB, 0 
0x0700	0x6F15      	MOVWF       main_en_de_L0, 1
;TestMicroC.c,262 :: 		if (adc_value < 256)
0x0702	0x0E01      	MOVLW       1
0x0704	0x5C01      	SUBWF       R1, 0 
0x0706	0xE102      	BNZ         L__main129
0x0708	0x0E00      	MOVLW       0
0x070A	0x5C00      	SUBWF       R0, 0 
L__main129:
0x070C	0xE240      	BC          L_main98
;TestMicroC.c,264 :: 		Delay_ms(100);
0x070E	0x0E02      	MOVLW       2
0x0710	0x6E0B      	MOVWF       R11, 0
0x0712	0x0E04      	MOVLW       4
0x0714	0x6E0C      	MOVWF       R12, 0
0x0716	0x0EBA      	MOVLW       186
0x0718	0x6E0D      	MOVWF       R13, 0
L_main99:
0x071A	0x2E0D      	DECFSZ      R13, 1, 0
0x071C	0xD7FE      	BRA         L_main99
0x071E	0x2E0C      	DECFSZ      R12, 1, 0
0x0720	0xD7FC      	BRA         L_main99
0x0722	0x2E0B      	DECFSZ      R11, 1, 0
0x0724	0xD7FA      	BRA         L_main99
0x0726	0x0000      	NOP
;TestMicroC.c,266 :: 		BCF LATA, 1
0x0728	0x9289      	BCF         LATA, 1, 0
;TestMicroC.c,267 :: 		BCF LATA, 2
0x072A	0x9489      	BCF         LATA, 2, 0
;TestMicroC.c,269 :: 		Delay_ms(100);
0x072C	0x0E02      	MOVLW       2
0x072E	0x6E0B      	MOVWF       R11, 0
0x0730	0x0E04      	MOVLW       4
0x0732	0x6E0C      	MOVWF       R12, 0
0x0734	0x0EBA      	MOVLW       186
0x0736	0x6E0D      	MOVWF       R13, 0
L_main100:
0x0738	0x2E0D      	DECFSZ      R13, 1, 0
0x073A	0xD7FE      	BRA         L_main100
0x073C	0x2E0C      	DECFSZ      R12, 1, 0
0x073E	0xD7FC      	BRA         L_main100
0x0740	0x2E0B      	DECFSZ      R11, 1, 0
0x0742	0xD7FA      	BRA         L_main100
0x0744	0x0000      	NOP
;TestMicroC.c,270 :: 		orig_char = get7SegVal(inputChar);
0x0746	0xF11CC114  	MOVFF       main_inputChar_L0, FARG_get7SegVal_input_num
0x074A	0xDCFD      	RCALL       _get7SegVal
0x074C	0xF116C000  	MOVFF       R0, main_orig_char_L0
;TestMicroC.c,271 :: 		LATC = segmentValues[orig_char];
0x0750	0x0EED      	MOVLW       _segmentValues
0x0752	0x6EE9      	MOVWF       FSR0L 
0x0754	0x0E00      	MOVLW       hi_addr(_segmentValues)
0x0756	0x6EEA      	MOVWF       FSR0L+1 
0x0758	0x5000      	MOVF        R0, 0 
0x075A	0x26E9      	ADDWF       FSR0L, 1 
0x075C	0xB0D8      	BTFSC       STATUS, 0 
0x075E	0x2AEA      	INCF        FSR0L+1, 1 
0x0760	0xFF8BCFEE  	MOVFF       POSTINC0, LATC
;TestMicroC.c,273 :: 		coded_char = ceaserCipher(inputChar, 3, en_de);
0x0764	0xF118C114  	MOVFF       main_inputChar_L0, FARG_ceaserCipher_inputChar
0x0768	0x0E03      	MOVLW       3
0x076A	0x0101      	MOVLB       1
0x076C	0x6F19      	MOVWF       FARG_ceaserCipher_shift, 1
0x076E	0xF11AC115  	MOVFF       main_en_de_L0, FARG_ceaserCipher_en_de
0x0772	0xDF80      	RCALL       _ceaserCipher
0x0774	0xF117C000  	MOVFF       R0, main_coded_char_L0
;TestMicroC.c,274 :: 		LATD = segmentValues[coded_char];
0x0778	0x0EED      	MOVLW       _segmentValues
0x077A	0x6EE9      	MOVWF       FSR0L 
0x077C	0x0E00      	MOVLW       hi_addr(_segmentValues)
0x077E	0x6EEA      	MOVWF       FSR0L+1 
0x0780	0x5000      	MOVF        R0, 0 
0x0782	0x26E9      	ADDWF       FSR0L, 1 
0x0784	0xB0D8      	BTFSC       STATUS, 0 
0x0786	0x2AEA      	INCF        FSR0L+1, 1 
0x0788	0xFF8CCFEE  	MOVFF       POSTINC0, LATD
;TestMicroC.c,275 :: 		}
0x078C	0xD10A      	BRA         L_main101
L_main98:
;TestMicroC.c,276 :: 		else if (adc_value < 512)
0x078E	0x0E02      	MOVLW       2
0x0790	0x0101      	MOVLB       1
0x0792	0x5D13      	SUBWF       main_adc_value_L0+1, 0, 1
0x0794	0xE102      	BNZ         L__main130
0x0796	0x0E00      	MOVLW       0
0x0798	0x5D12      	SUBWF       main_adc_value_L0, 0, 1
L__main130:
0x079A	0xE240      	BC          L_main102
;TestMicroC.c,278 :: 		Delay_ms(100);
0x079C	0x0E02      	MOVLW       2
0x079E	0x6E0B      	MOVWF       R11, 0
0x07A0	0x0E04      	MOVLW       4
0x07A2	0x6E0C      	MOVWF       R12, 0
0x07A4	0x0EBA      	MOVLW       186
0x07A6	0x6E0D      	MOVWF       R13, 0
L_main103:
0x07A8	0x2E0D      	DECFSZ      R13, 1, 0
0x07AA	0xD7FE      	BRA         L_main103
0x07AC	0x2E0C      	DECFSZ      R12, 1, 0
0x07AE	0xD7FC      	BRA         L_main103
0x07B0	0x2E0B      	DECFSZ      R11, 1, 0
0x07B2	0xD7FA      	BRA         L_main103
0x07B4	0x0000      	NOP
;TestMicroC.c,280 :: 		BCF LATA, 1
0x07B6	0x9289      	BCF         LATA, 1, 0
;TestMicroC.c,281 :: 		BSF LATA, 2
0x07B8	0x8489      	BSF         LATA, 2, 0
;TestMicroC.c,283 :: 		Delay_ms(100);
0x07BA	0x0E02      	MOVLW       2
0x07BC	0x6E0B      	MOVWF       R11, 0
0x07BE	0x0E04      	MOVLW       4
0x07C0	0x6E0C      	MOVWF       R12, 0
0x07C2	0x0EBA      	MOVLW       186
0x07C4	0x6E0D      	MOVWF       R13, 0
L_main104:
0x07C6	0x2E0D      	DECFSZ      R13, 1, 0
0x07C8	0xD7FE      	BRA         L_main104
0x07CA	0x2E0C      	DECFSZ      R12, 1, 0
0x07CC	0xD7FC      	BRA         L_main104
0x07CE	0x2E0B      	DECFSZ      R11, 1, 0
0x07D0	0xD7FA      	BRA         L_main104
0x07D2	0x0000      	NOP
;TestMicroC.c,285 :: 		orig_char = get7SegVal(inputChar);
0x07D4	0xF11CC114  	MOVFF       main_inputChar_L0, FARG_get7SegVal_input_num
0x07D8	0xDCB6      	RCALL       _get7SegVal
0x07DA	0xF116C000  	MOVFF       R0, main_orig_char_L0
;TestMicroC.c,286 :: 		LATC = segmentValues[orig_char];
0x07DE	0x0EED      	MOVLW       _segmentValues
0x07E0	0x6EE9      	MOVWF       FSR0L 
0x07E2	0x0E00      	MOVLW       hi_addr(_segmentValues)
0x07E4	0x6EEA      	MOVWF       FSR0L+1 
0x07E6	0x5000      	MOVF        R0, 0 
0x07E8	0x26E9      	ADDWF       FSR0L, 1 
0x07EA	0xB0D8      	BTFSC       STATUS, 0 
0x07EC	0x2AEA      	INCF        FSR0L+1, 1 
0x07EE	0xFF8BCFEE  	MOVFF       POSTINC0, LATC
;TestMicroC.c,288 :: 		coded_char = ceaserCipher(inputChar, 5, en_de);
0x07F2	0xF118C114  	MOVFF       main_inputChar_L0, FARG_ceaserCipher_inputChar
0x07F6	0x0E05      	MOVLW       5
0x07F8	0x0101      	MOVLB       1
0x07FA	0x6F19      	MOVWF       FARG_ceaserCipher_shift, 1
0x07FC	0xF11AC115  	MOVFF       main_en_de_L0, FARG_ceaserCipher_en_de
0x0800	0xDF39      	RCALL       _ceaserCipher
0x0802	0xF117C000  	MOVFF       R0, main_coded_char_L0
;TestMicroC.c,289 :: 		LATD = segmentValues[coded_char];
0x0806	0x0EED      	MOVLW       _segmentValues
0x0808	0x6EE9      	MOVWF       FSR0L 
0x080A	0x0E00      	MOVLW       hi_addr(_segmentValues)
0x080C	0x6EEA      	MOVWF       FSR0L+1 
0x080E	0x5000      	MOVF        R0, 0 
0x0810	0x26E9      	ADDWF       FSR0L, 1 
0x0812	0xB0D8      	BTFSC       STATUS, 0 
0x0814	0x2AEA      	INCF        FSR0L+1, 1 
0x0816	0xFF8CCFEE  	MOVFF       POSTINC0, LATD
;TestMicroC.c,290 :: 		}
0x081A	0xD0C3      	BRA         L_main105
L_main102:
;TestMicroC.c,291 :: 		else if (adc_value < 768)
0x081C	0x0E03      	MOVLW       3
0x081E	0x0101      	MOVLB       1
0x0820	0x5D13      	SUBWF       main_adc_value_L0+1, 0, 1
0x0822	0xE102      	BNZ         L__main131
0x0824	0x0E00      	MOVLW       0
0x0826	0x5D12      	SUBWF       main_adc_value_L0, 0, 1
L__main131:
0x0828	0xE248      	BC          L_main106
;TestMicroC.c,293 :: 		Delay_ms(100);
0x082A	0x0E02      	MOVLW       2
0x082C	0x6E0B      	MOVWF       R11, 0
0x082E	0x0E04      	MOVLW       4
0x0830	0x6E0C      	MOVWF       R12, 0
0x0832	0x0EBA      	MOVLW       186
0x0834	0x6E0D      	MOVWF       R13, 0
L_main107:
0x0836	0x2E0D      	DECFSZ      R13, 1, 0
0x0838	0xD7FE      	BRA         L_main107
0x083A	0x2E0C      	DECFSZ      R12, 1, 0
0x083C	0xD7FC      	BRA         L_main107
0x083E	0x2E0B      	DECFSZ      R11, 1, 0
0x0840	0xD7FA      	BRA         L_main107
0x0842	0x0000      	NOP
;TestMicroC.c,295 :: 		BSF LATA, 1
0x0844	0x8289      	BSF         LATA, 1, 0
;TestMicroC.c,296 :: 		BCF LATA, 2
0x0846	0x9489      	BCF         LATA, 2, 0
;TestMicroC.c,298 :: 		Delay_ms(100);
0x0848	0x0E02      	MOVLW       2
0x084A	0x6E0B      	MOVWF       R11, 0
0x084C	0x0E04      	MOVLW       4
0x084E	0x6E0C      	MOVWF       R12, 0
0x0850	0x0EBA      	MOVLW       186
0x0852	0x6E0D      	MOVWF       R13, 0
L_main108:
0x0854	0x2E0D      	DECFSZ      R13, 1, 0
0x0856	0xD7FE      	BRA         L_main108
0x0858	0x2E0C      	DECFSZ      R12, 1, 0
0x085A	0xD7FC      	BRA         L_main108
0x085C	0x2E0B      	DECFSZ      R11, 1, 0
0x085E	0xD7FA      	BRA         L_main108
0x0860	0x0000      	NOP
;TestMicroC.c,300 :: 		if (en_de == 0) // Encoding mode
0x0862	0x5115      	MOVF        main_en_de_L0, 0, 1
0x0864	0x0A00      	XORLW       0
0x0866	0xE113      	BNZ         L_main109
;TestMicroC.c,302 :: 		orig_char = get7SegVal(inputChar); // Get the original character index (0-35)
0x0868	0xF11CC114  	MOVFF       main_inputChar_L0, FARG_get7SegVal_input_num
0x086C	0xDC6C      	RCALL       _get7SegVal
0x086E	0xF116C000  	MOVFF       R0, main_orig_char_L0
;TestMicroC.c,303 :: 		LATC = segmentValues[orig_char];  // Display original character on PORTC
0x0872	0x0EED      	MOVLW       _segmentValues
0x0874	0x6EE9      	MOVWF       FSR0L 
0x0876	0x0E00      	MOVLW       hi_addr(_segmentValues)
0x0878	0x6EEA      	MOVWF       FSR0L+1 
0x087A	0x5000      	MOVF        R0, 0 
0x087C	0x26E9      	ADDWF       FSR0L, 1 
0x087E	0xB0D8      	BTFSC       STATUS, 0 
0x0880	0x2AEA      	INCF        FSR0L+1, 1 
0x0882	0xFF8BCFEE  	MOVFF       POSTINC0, LATC
;TestMicroC.c,304 :: 		morseEncode(inputChar); // Encode the character into Morse code
0x0886	0xF118C114  	MOVFF       main_inputChar_L0, FARG_morseEncode_inputChar
0x088A	0xDE6F      	RCALL       _morseEncode
;TestMicroC.c,305 :: 		}
0x088C	0xD015      	BRA         L_main110
L_main109:
;TestMicroC.c,309 :: 		LATC = 0x00;
0x088E	0x6A8B      	CLRF        LATC 
;TestMicroC.c,310 :: 		coded_char = morseDecode(inputChar); // Decode the Morse code
0x0890	0xF118C114  	MOVFF       main_inputChar_L0, FARG_morseDecode_morseInput
0x0894	0xDEDA      	RCALL       _morseDecode
0x0896	0xF117C000  	MOVFF       R0, main_coded_char_L0
;TestMicroC.c,312 :: 		if (coded_char != 255) // If valid decoded character
0x089A	0x5000      	MOVF        R0, 0 
0x089C	0x0AFF      	XORLW       255
0x089E	0xE00B      	BZ          L_main111
;TestMicroC.c,314 :: 		LATD = segmentValues[coded_char]; // Display decoded character on PORTD
0x08A0	0x0EED      	MOVLW       _segmentValues
0x08A2	0x6EE9      	MOVWF       FSR0L 
0x08A4	0x0E00      	MOVLW       hi_addr(_segmentValues)
0x08A6	0x6EEA      	MOVWF       FSR0L+1 
0x08A8	0x5117      	MOVF        main_coded_char_L0, 0, 1
0x08AA	0x26E9      	ADDWF       FSR0L, 1 
0x08AC	0xB0D8      	BTFSC       STATUS, 0 
0x08AE	0x2AEA      	INCF        FSR0L+1, 1 
0x08B0	0xFF8CCFEE  	MOVFF       POSTINC0, LATD
;TestMicroC.c,315 :: 		}
0x08B4	0xD001      	BRA         L_main112
L_main111:
;TestMicroC.c,318 :: 		LATD = 0x00; // Invalid Morse code, display nothing
0x08B6	0x6A8C      	CLRF        LATD 
;TestMicroC.c,319 :: 		}
L_main112:
;TestMicroC.c,320 :: 		}
L_main110:
;TestMicroC.c,321 :: 		}
0x08B8	0xD074      	BRA         L_main113
L_main106:
;TestMicroC.c,324 :: 		Delay_ms(100);
0x08BA	0x0E02      	MOVLW       2
0x08BC	0x6E0B      	MOVWF       R11, 0
0x08BE	0x0E04      	MOVLW       4
0x08C0	0x6E0C      	MOVWF       R12, 0
0x08C2	0x0EBA      	MOVLW       186
0x08C4	0x6E0D      	MOVWF       R13, 0
L_main114:
0x08C6	0x2E0D      	DECFSZ      R13, 1, 0
0x08C8	0xD7FE      	BRA         L_main114
0x08CA	0x2E0C      	DECFSZ      R12, 1, 0
0x08CC	0xD7FC      	BRA         L_main114
0x08CE	0x2E0B      	DECFSZ      R11, 1, 0
0x08D0	0xD7FA      	BRA         L_main114
0x08D2	0x0000      	NOP
;TestMicroC.c,326 :: 		BSF LATA, 1
0x08D4	0x8289      	BSF         LATA, 1, 0
;TestMicroC.c,327 :: 		BSF LATA, 2
0x08D6	0x8489      	BSF         LATA, 2, 0
;TestMicroC.c,329 :: 		Delay_ms(100);
0x08D8	0x0E02      	MOVLW       2
0x08DA	0x6E0B      	MOVWF       R11, 0
0x08DC	0x0E04      	MOVLW       4
0x08DE	0x6E0C      	MOVWF       R12, 0
0x08E0	0x0EBA      	MOVLW       186
0x08E2	0x6E0D      	MOVWF       R13, 0
L_main115:
0x08E4	0x0101      	MOVLB       1
0x08E6	0x2E0D      	DECFSZ      R13, 1, 0
0x08E8	0xD7FD      	BRA         L_main115
0x08EA	0x2E0C      	DECFSZ      R12, 1, 0
0x08EC	0xD7FB      	BRA         L_main115
0x08EE	0x2E0B      	DECFSZ      R11, 1, 0
0x08F0	0xD7F9      	BRA         L_main115
0x08F2	0x0000      	NOP
;TestMicroC.c,331 :: 		if (en_de == 0) // Encoding mode
0x08F4	0x5115      	MOVF        main_en_de_L0, 0, 1
0x08F6	0x0A00      	XORLW       0
0x08F8	0xE129      	BNZ         L_main116
;TestMicroC.c,334 :: 		orig_char = get7SegVal(inputChar);
0x08FA	0xF11CC114  	MOVFF       main_inputChar_L0, FARG_get7SegVal_input_num
0x08FE	0xDC23      	RCALL       _get7SegVal
0x0900	0xF116C000  	MOVFF       R0, main_orig_char_L0
;TestMicroC.c,335 :: 		LATC = segmentValues[orig_char]; // Display original character on PORTC
0x0904	0x0EED      	MOVLW       _segmentValues
0x0906	0x6EE9      	MOVWF       FSR0L 
0x0908	0x0E00      	MOVLW       hi_addr(_segmentValues)
0x090A	0x6EEA      	MOVWF       FSR0L+1 
0x090C	0x5000      	MOVF        R0, 0 
0x090E	0x26E9      	ADDWF       FSR0L, 1 
0x0910	0xB0D8      	BTFSC       STATUS, 0 
0x0912	0x2AEA      	INCF        FSR0L+1, 1 
0x0914	0xFF8BCFEE  	MOVFF       POSTINC0, LATC
;TestMicroC.c,336 :: 		Delay_ms(100);
0x0918	0x0E02      	MOVLW       2
0x091A	0x6E0B      	MOVWF       R11, 0
0x091C	0x0E04      	MOVLW       4
0x091E	0x6E0C      	MOVWF       R12, 0
0x0920	0x0EBA      	MOVLW       186
0x0922	0x6E0D      	MOVWF       R13, 0
L_main117:
0x0924	0x2E0D      	DECFSZ      R13, 1, 0
0x0926	0xD7FE      	BRA         L_main117
0x0928	0x2E0C      	DECFSZ      R12, 1, 0
0x092A	0xD7FC      	BRA         L_main117
0x092C	0x2E0B      	DECFSZ      R11, 1, 0
0x092E	0xD7FA      	BRA         L_main117
0x0930	0x0000      	NOP
;TestMicroC.c,339 :: 		coded_char = ceaserCipher(orig_char, 3, 0); // Encode with Caesar cipher
0x0932	0xF118C116  	MOVFF       main_orig_char_L0, FARG_ceaserCipher_inputChar
0x0936	0x0E03      	MOVLW       3
0x0938	0x0101      	MOVLB       1
0x093A	0x6F19      	MOVWF       FARG_ceaserCipher_shift, 1
0x093C	0x6B1A      	CLRF        FARG_ceaserCipher_en_de, 1
0x093E	0xDE9A      	RCALL       _ceaserCipher
0x0940	0xF117C000  	MOVFF       R0, main_coded_char_L0
;TestMicroC.c,342 :: 		morseEncode(coded_char); // Display Morse code via LEDs
0x0944	0xF118C000  	MOVFF       R0, FARG_morseEncode_inputChar
0x0948	0xDE10      	RCALL       _morseEncode
;TestMicroC.c,343 :: 		}
0x094A	0xD02B      	BRA         L_main118
L_main116:
;TestMicroC.c,346 :: 		LATC = 0x00;
0x094C	0x6A8B      	CLRF        LATC 
;TestMicroC.c,347 :: 		Delay_ms(100);
0x094E	0x0E02      	MOVLW       2
0x0950	0x6E0B      	MOVWF       R11, 0
0x0952	0x0E04      	MOVLW       4
0x0954	0x6E0C      	MOVWF       R12, 0
0x0956	0x0EBA      	MOVLW       186
0x0958	0x6E0D      	MOVWF       R13, 0
L_main119:
0x095A	0x2E0D      	DECFSZ      R13, 1, 0
0x095C	0xD7FE      	BRA         L_main119
0x095E	0x2E0C      	DECFSZ      R12, 1, 0
0x0960	0xD7FC      	BRA         L_main119
0x0962	0x2E0B      	DECFSZ      R11, 1, 0
0x0964	0xD7FA      	BRA         L_main119
0x0966	0x0000      	NOP
;TestMicroC.c,349 :: 		coded_char = morseDecode(inputChar); // Decode Morse input
0x0968	0xF118C114  	MOVFF       main_inputChar_L0, FARG_morseDecode_morseInput
0x096C	0xDE6E      	RCALL       _morseDecode
0x096E	0xF117C000  	MOVFF       R0, main_coded_char_L0
;TestMicroC.c,350 :: 		if (coded_char != 255) // Valid Morse code decoded
0x0972	0x5000      	MOVF        R0, 0 
0x0974	0x0AFF      	XORLW       255
0x0976	0xE014      	BZ          L_main120
;TestMicroC.c,353 :: 		orig_char = ceaserCipher(coded_char, 3, 1); // Decode with Caesar cipher
0x0978	0xF118C117  	MOVFF       main_coded_char_L0, FARG_ceaserCipher_inputChar
0x097C	0x0E03      	MOVLW       3
0x097E	0x6F19      	MOVWF       FARG_ceaserCipher_shift, 1
0x0980	0x0E01      	MOVLW       1
0x0982	0x6F1A      	MOVWF       FARG_ceaserCipher_en_de, 1
0x0984	0xDE77      	RCALL       _ceaserCipher
0x0986	0xF116C000  	MOVFF       R0, main_orig_char_L0
;TestMicroC.c,356 :: 		LATD = segmentValues[orig_char];
0x098A	0x0EED      	MOVLW       _segmentValues
0x098C	0x6EE9      	MOVWF       FSR0L 
0x098E	0x0E00      	MOVLW       hi_addr(_segmentValues)
0x0990	0x6EEA      	MOVWF       FSR0L+1 
0x0992	0x5000      	MOVF        R0, 0 
0x0994	0x26E9      	ADDWF       FSR0L, 1 
0x0996	0xB0D8      	BTFSC       STATUS, 0 
0x0998	0x2AEA      	INCF        FSR0L+1, 1 
0x099A	0xFF8CCFEE  	MOVFF       POSTINC0, LATD
;TestMicroC.c,357 :: 		}
0x099E	0xD001      	BRA         L_main121
L_main120:
;TestMicroC.c,360 :: 		LATD = 0x00; // Invalid Morse code, display nothing
0x09A0	0x6A8C      	CLRF        LATD 
;TestMicroC.c,361 :: 		}
L_main121:
;TestMicroC.c,362 :: 		}
L_main118:
;TestMicroC.c,363 :: 		}
L_main113:
L_main105:
L_main101:
;TestMicroC.c,366 :: 		Delay_ms(100);  // Add a small delay for stability
0x09A2	0x0E02      	MOVLW       2
0x09A4	0x6E0B      	MOVWF       R11, 0
0x09A6	0x0E04      	MOVLW       4
0x09A8	0x6E0C      	MOVWF       R12, 0
0x09AA	0x0EBA      	MOVLW       186
0x09AC	0x6E0D      	MOVWF       R13, 0
L_main122:
0x09AE	0x2E0D      	DECFSZ      R13, 1, 0
0x09B0	0xD7FE      	BRA         L_main122
0x09B2	0x2E0C      	DECFSZ      R12, 1, 0
0x09B4	0xD7FC      	BRA         L_main122
0x09B6	0x2E0B      	DECFSZ      R11, 1, 0
0x09B8	0xD7FA      	BRA         L_main122
0x09BA	0x0000      	NOP
;TestMicroC.c,367 :: 		}
0x09BC	0xD695      	BRA         L_main96
;TestMicroC.c,368 :: 		}
L_end_main:
0x09BE	0xD7FF      	BRA         $+0
; end of _main
0x0ABE	0xF015EE10  	LFSR        1, 21
0x0AC2	0x0EFD      	MOVLW       253
0x0AC4	0x6E00      	MOVWF       R0 
0x0AC6	0x0E01      	MOVLW       1
0x0AC8	0x6E01      	MOVWF       R1 
0x0ACA	0x0EC0      	MOVLW       192
0x0ACC	0x6EF6      	MOVWF       4086 
0x0ACE	0x0E09      	MOVLW       9
0x0AD0	0x6EF7      	MOVWF       TBLPTRH 
0x0AD2	0x0E00      	MOVLW       0
0x0AD4	0x6EF8      	MOVWF       TBLPTRU 
0x0AD6	0xF002ECAD  	CALL        1370, 0
0x0ADA	0x0012      	RETURN      0
;TestMicroC.c,0 :: ?ICS_morseCodes
0x09C0	0x2D2D ;?ICS_morseCodes+0
0x09C2	0x2D2D ;?ICS_morseCodes+2
0x09C4	0x002D ;?ICS_morseCodes+4
0x09C6	0x2D2E ;?ICS_morseCodes+6
0x09C8	0x2D2D ;?ICS_morseCodes+8
0x09CA	0x002D ;?ICS_morseCodes+10
0x09CC	0x2E2E ;?ICS_morseCodes+12
0x09CE	0x2D2D ;?ICS_morseCodes+14
0x09D0	0x002D ;?ICS_morseCodes+16
0x09D2	0x2E2E ;?ICS_morseCodes+18
0x09D4	0x2D2E ;?ICS_morseCodes+20
0x09D6	0x002D ;?ICS_morseCodes+22
0x09D8	0x2E2E ;?ICS_morseCodes+24
0x09DA	0x2E2E ;?ICS_morseCodes+26
0x09DC	0x002D ;?ICS_morseCodes+28
0x09DE	0x2E2E ;?ICS_morseCodes+30
0x09E0	0x2E2E ;?ICS_morseCodes+32
0x09E2	0x002E ;?ICS_morseCodes+34
0x09E4	0x2E2D ;?ICS_morseCodes+36
0x09E6	0x2E2E ;?ICS_morseCodes+38
0x09E8	0x002E ;?ICS_morseCodes+40
0x09EA	0x2D2D ;?ICS_morseCodes+42
0x09EC	0x2E2E ;?ICS_morseCodes+44
0x09EE	0x002E ;?ICS_morseCodes+46
0x09F0	0x2D2D ;?ICS_morseCodes+48
0x09F2	0x2E2D ;?ICS_morseCodes+50
0x09F4	0x002E ;?ICS_morseCodes+52
0x09F6	0x2D2D ;?ICS_morseCodes+54
0x09F8	0x2D2D ;?ICS_morseCodes+56
0x09FA	0x002E ;?ICS_morseCodes+58
0x09FC	0x2D2E ;?ICS_morseCodes+60
0x09FE	0x0000 ;?ICS_morseCodes+62
0x0A00	0x0000 ;?ICS_morseCodes+64
0x0A02	0x2E2D ;?ICS_morseCodes+66
0x0A04	0x2E2E ;?ICS_morseCodes+68
0x0A06	0x0000 ;?ICS_morseCodes+70
0x0A08	0x2E2D ;?ICS_morseCodes+72
0x0A0A	0x2E2D ;?ICS_morseCodes+74
0x0A0C	0x0000 ;?ICS_morseCodes+76
0x0A0E	0x2E2D ;?ICS_morseCodes+78
0x0A10	0x002E ;?ICS_morseCodes+80
0x0A12	0x0000 ;?ICS_morseCodes+82
0x0A14	0x002E ;?ICS_morseCodes+84
0x0A16	0x0000 ;?ICS_morseCodes+86
0x0A18	0x0000 ;?ICS_morseCodes+88
0x0A1A	0x2E2E ;?ICS_morseCodes+90
0x0A1C	0x2E2D ;?ICS_morseCodes+92
0x0A1E	0x0000 ;?ICS_morseCodes+94
0x0A20	0x2D2D ;?ICS_morseCodes+96
0x0A22	0x002E ;?ICS_morseCodes+98
0x0A24	0x0000 ;?ICS_morseCodes+100
0x0A26	0x2E2E ;?ICS_morseCodes+102
0x0A28	0x2E2E ;?ICS_morseCodes+104
0x0A2A	0x0000 ;?ICS_morseCodes+106
0x0A2C	0x2E2E ;?ICS_morseCodes+108
0x0A2E	0x0000 ;?ICS_morseCodes+110
0x0A30	0x0000 ;?ICS_morseCodes+112
0x0A32	0x2D2E ;?ICS_morseCodes+114
0x0A34	0x2D2D ;?ICS_morseCodes+116
0x0A36	0x0000 ;?ICS_morseCodes+118
0x0A38	0x2E2D ;?ICS_morseCodes+120
0x0A3A	0x002D ;?ICS_morseCodes+122
0x0A3C	0x0000 ;?ICS_morseCodes+124
0x0A3E	0x2D2E ;?ICS_morseCodes+126
0x0A40	0x2E2E ;?ICS_morseCodes+128
0x0A42	0x0000 ;?ICS_morseCodes+130
0x0A44	0x2D2D ;?ICS_morseCodes+132
0x0A46	0x0000 ;?ICS_morseCodes+134
0x0A48	0x0000 ;?ICS_morseCodes+136
0x0A4A	0x2E2D ;?ICS_morseCodes+138
0x0A4C	0x0000 ;?ICS_morseCodes+140
0x0A4E	0x0000 ;?ICS_morseCodes+142
0x0A50	0x2D2D ;?ICS_morseCodes+144
0x0A52	0x002D ;?ICS_morseCodes+146
0x0A54	0x0000 ;?ICS_morseCodes+148
0x0A56	0x2D2E ;?ICS_morseCodes+150
0x0A58	0x2E2D ;?ICS_morseCodes+152
0x0A5A	0x0000 ;?ICS_morseCodes+154
0x0A5C	0x2D2D ;?ICS_morseCodes+156
0x0A5E	0x2D2E ;?ICS_morseCodes+158
0x0A60	0x0000 ;?ICS_morseCodes+160
0x0A62	0x2D2E ;?ICS_morseCodes+162
0x0A64	0x002E ;?ICS_morseCodes+164
0x0A66	0x0000 ;?ICS_morseCodes+166
0x0A68	0x2E2E ;?ICS_morseCodes+168
0x0A6A	0x002E ;?ICS_morseCodes+170
0x0A6C	0x0000 ;?ICS_morseCodes+172
0x0A6E	0x002D ;?ICS_morseCodes+174
0x0A70	0x0000 ;?ICS_morseCodes+176
0x0A72	0x0000 ;?ICS_morseCodes+178
0x0A74	0x2E2E ;?ICS_morseCodes+180
0x0A76	0x002D ;?ICS_morseCodes+182
0x0A78	0x0000 ;?ICS_morseCodes+184
0x0A7A	0x2E2E ;?ICS_morseCodes+186
0x0A7C	0x2D2E ;?ICS_morseCodes+188
0x0A7E	0x0000 ;?ICS_morseCodes+190
0x0A80	0x2D2E ;?ICS_morseCodes+192
0x0A82	0x002D ;?ICS_morseCodes+194
0x0A84	0x0000 ;?ICS_morseCodes+196
0x0A86	0x2E2D ;?ICS_morseCodes+198
0x0A88	0x2D2E ;?ICS_morseCodes+200
0x0A8A	0x0000 ;?ICS_morseCodes+202
0x0A8C	0x2E2D ;?ICS_morseCodes+204
0x0A8E	0x2D2D ;?ICS_morseCodes+206
0x0A90	0x0000 ;?ICS_morseCodes+208
0x0A92	0x2D2D ;?ICS_morseCodes+210
0x0A94	0x2E2E ;?ICS_morseCodes+212
0x0A96	0x0000 ;?ICS_morseCodes+214
; end of ?ICS_morseCodes
;TestMicroC.c,0 :: ?ICS_segmentValues
0x0A98	0x86BF ;?ICS_segmentValues+0
0x0A9A	0xCFDB ;?ICS_segmentValues+2
0x0A9C	0xEDE6 ;?ICS_segmentValues+4
0x0A9E	0x87FD ;?ICS_segmentValues+6
0x0AA0	0xE7FF ;?ICS_segmentValues+8
0x0AA2	0x7C77 ;?ICS_segmentValues+10
0x0AA4	0x5E39 ;?ICS_segmentValues+12
0x0AA6	0x7179 ;?ICS_segmentValues+14
0x0AA8	0x766F ;?ICS_segmentValues+16
0x0AAA	0x1F06 ;?ICS_segmentValues+18
0x0AAC	0x3875 ;?ICS_segmentValues+20
0x0AAE	0x5455 ;?ICS_segmentValues+22
0x0AB0	0x733F ;?ICS_segmentValues+24
0x0AB2	0x5067 ;?ICS_segmentValues+26
0x0AB4	0x786D ;?ICS_segmentValues+28
0x0AB6	0x2A1C ;?ICS_segmentValues+30
0x0AB8	0x366A ;?ICS_segmentValues+32
0x0ABA	0x5B6E ;?ICS_segmentValues+34
; end of ?ICS_segmentValues
;__Lib_ADC_A_C.c,0 :: ?ICS_vref_mask
0x0ABC	0x0F ;?ICS_vref_mask+0
; end of ?ICS_vref_mask
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [88]    _Div_16x16_S_L
0x0074     [198]    _Div_16x16_S
0x013A      [12]    _Delay_22us
0x0146     [444]    _get7SegVal
0x0302     [450]    _getMorseCodeBinary
0x04C4      [80]    _Mul_16X16_U
0x0514      [70]    _ADC_Read
0x055A      [16]    ___CC2DW
0x056A     [224]    _morseEncode
0x064A      [42]    _morseDecode
0x0674      [94]    _ceaserCipher
0x06D2     [750]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [2]    strlen_cp_L0
0x0002       [1]    R2
0x0002       [2]    memchr_s_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [2]    memset_pp_L0
0x0003       [2]    memmove_tt_L0
0x0003       [1]    R3
0x0004       [2]    strncpy_cp_L0
0x0004       [1]    R4
0x0004       [2]    strncat_cp_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    strcat_cp_L0
0x0005       [1]    R5
0x0005       [2]    memmove_ff_L0
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015     [216]    _morseCodes
0x00ED      [36]    _segmentValues
0x0111       [1]    _vref_mask
0x0112       [2]    main_adc_value_L0
0x0114       [1]    main_inputChar_L0
0x0115       [1]    main_en_de_L0
0x0116       [1]    main_orig_char_L0
0x0117       [1]    main_coded_char_L0
0x0118       [1]    FARG_ADC_Read_channel
0x0118       [1]    FARG_morseEncode_inputChar
0x0118       [1]    FARG_morseDecode_morseInput
0x0118       [1]    FARG_ceaserCipher_inputChar
0x0119       [1]    morseDecode_i_L0
0x0119       [1]    FARG_ceaserCipher_shift
0x0119       [1]    morseEncode_symbol_L1
0x011A       [1]    morseDecode_decodedChar_L0
0x011A       [1]    morseEncode_i_L0
0x011A       [1]    FARG_ceaserCipher_en_de
0x011B       [1]    morseEncode_index_L0
0x011B       [1]    ceaserCipher_result_L0
0x011C       [1]    FARG_get7SegVal_input_num
0x011C       [1]    FARG_getMorseCodeBinary_index
0x011D       [1]    getMorseCodeBinary_morseInput_L0
0x0F81       [1]    PORTB
0x0F82       [1]    PORTC
0x0F89       [1]    LATA
0x0F8B       [1]    LATC
0x0F8C       [1]    LATD
0x0F92       [1]    TRISA
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0F95       [1]    TRISD
0x0FC1       [1]    ADCON1
0x0FC2       [1]    ADCON0
0x0FC3       [1]    ADRESL
0x0FC4       [1]    ADRESH
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x09C0     [216]    ?ICS_morseCodes
0x0A98      [36]    ?ICS_segmentValues
0x0ABC       [1]    ?ICS_vref_mask
